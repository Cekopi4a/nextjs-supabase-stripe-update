// utils/email/invitation-service.ts
import { createSupabaseClient } from "@/utils/supabase/server";

export interface InvitationEmailData {
  recipientEmail: string;
  recipientName?: string;
  trainerName: string;
  trainerEmail: string;
  personalMessage?: string;
  invitationToken: string;
  expiresAt: string;
}

export class InvitationEmailService {
  private supabase: any = null;

  private async getSupabaseClient() {
    if (!this.supabase) {
      this.supabase = await createSupabaseClient();
    }
    return this.supabase;
  }

  /**
   * Send invitation email (integration with email service like Resend, SendGrid, etc.)
   */
  async sendInvitationEmail(data: InvitationEmailData): Promise<boolean> {
    try {
      // In a real implementation, you would integrate with:
      // - Resend (recommended for simplicity)
      // - SendGrid 
      // - AWS SES
      // - Postmark
      // etc.

      const invitationLink = `${process.env.NEXT_PUBLIC_SITE_URL}/join/${data.invitationToken}`;
      
      const emailHtml = this.generateInvitationEmailHTML(data, invitationLink);
      const emailText = this.generateInvitationEmailText(data, invitationLink);

      // Example with Resend (you need to install @resend/node and configure)
      /*
      import { Resend } from 'resend';
      const resend = new Resend(process.env.RESEND_API_KEY);

      const emailResult = await resend.emails.send({
        from: 'noreply@yourdomain.com',
        to: data.recipientEmail,
        subject: `–ü–æ–∫–∞–Ω–∞ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç ${data.trainerName}`,
        html: emailHtml,
        text: emailText,
      });
      */

      // For now, we'll log the email content and return true
      // In production, replace this with actual email sending
      console.log('=== INVITATION EMAIL ===');
      console.log('To:', data.recipientEmail);
      console.log('Subject:', `–ü–æ–∫–∞–Ω–∞ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç ${data.trainerName}`);
      console.log('Link:', invitationLink);
      console.log('========================');

      // Log email in database
      await this.logEmailSent(data);

      return true;
    } catch (error) {
      console.error('Error sending invitation email:', error);
      return false;
    }
  }

  /**
   * Generate HTML email template
   */
  private generateInvitationEmailHTML(data: InvitationEmailData, invitationLink: string): string {
    const recipientName = data.recipientName || data.recipientEmail.split('@')[0];
    const expiresDate = new Date(data.expiresAt).toLocaleDateString('bg-BG');

    return `
    <!DOCTYPE html>
    <html lang="bg">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>–ü–æ–∫–∞–Ω–∞ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</title>
      <style>
        body { 
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
          line-height: 1.6; 
          color: #333; 
          max-width: 600px; 
          margin: 0 auto; 
          padding: 20px; 
        }
        .header { 
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
          color: white; 
          padding: 30px; 
          text-align: center; 
          border-radius: 10px 10px 0 0; 
        }
        .content { 
          background: #f8f9fa; 
          padding: 30px; 
          border-radius: 0 0 10px 10px; 
        }
        .message-box { 
          background: #e3f2fd; 
          border-left: 4px solid #2196f3; 
          padding: 15px; 
          margin: 20px 0; 
          border-radius: 4px; 
        }
        .cta-button { 
          display: inline-block; 
          background: #4caf50; 
          color: white; 
          padding: 15px 30px; 
          text-decoration: none; 
          border-radius: 5px; 
          font-weight: bold; 
          margin: 20px 0; 
        }
        .footer { 
          text-align: center; 
          color: #666; 
          font-size: 12px; 
          margin-top: 30px; 
          padding-top: 20px; 
          border-top: 1px solid #eee; 
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>üèãÔ∏è –î–æ–±—Ä–µ –¥–æ—à–ª–∏ –≤ –µ–∫–∏–ø–∞!</h1>
        <p>–ü–æ–∫–∞–Ω–µ–Ω–∏ —Å—Ç–µ –¥–∞ –∑–∞–ø–æ—á–Ω–µ—Ç–µ —Ñ–∏—Ç–Ω–µ—Å –ø—ä—Ç—É–≤–∞–Ω–µ—Ç–æ —Å–∏</p>
      </div>
      
      <div class="content">
        <h2>–ó–¥—Ä–∞–≤–µ–π—Ç–µ${recipientName ? `, ${recipientName}` : ''}!</h2>
        
        <p><strong>${data.trainerName}</strong> –≤–∏ –∫–∞–Ω–∏ –¥–∞ —Å—Ç–∞–Ω–µ—Ç–µ –Ω–µ–≥–æ–≤ –∫–ª–∏–µ–Ω—Ç –∏ –¥–∞ –∑–∞–ø–æ—á–Ω–µ—Ç–µ —Ä–∞–±–æ—Ç–∞ –∑–∞–µ–¥–Ω–æ –∑–∞ –ø–æ—Å—Ç–∏–≥–∞–Ω–µ –Ω–∞ –≤–∞—à–∏—Ç–µ —Ñ–∏—Ç–Ω–µ—Å —Ü–µ–ª–∏.</p>
        
        ${data.personalMessage ? `
        <div class="message-box">
          <strong>–õ–∏—á–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ –æ—Ç ${data.trainerName}:</strong><br>
          "${data.personalMessage}"
        </div>
        ` : ''}
        
        <h3>–ö–∞–∫–≤–æ –≤–∏ –æ—á–∞–∫–≤–∞:</h3>
        <ul>
          <li>üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤—ä—á–Ω–∏ –ø—Ä–æ–≥—Ä–∞–º–∏</li>
          <li>üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä —Å –ø–ª–∞–Ω–∏—Ä–∞–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</li>
          <li>üìä –ü—Ä–æ—Å–ª–µ–¥—è–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å –∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏</li>
          <li>ü•ó –•—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –∏ –ø–ª–∞–Ω–æ–≤–µ</li>
          <li>üí¨ –î–∏—Ä–µ–∫—Ç–Ω–∞ –≤—Ä—ä–∑–∫–∞ —Å –≤–∞—à–∏—è —Ç—Ä–µ–Ω—å–æ—Ä</li>
        </ul>
        
        <div style="text-align: center;">
          <a href="${invitationLink}" class="cta-button">
            –ó–∞–ø–æ—á–Ω–µ—Ç–µ —Å–µ–≥–∞
          </a>
        </div>
        
        <p><strong>–í–∞–∂–Ω–æ:</strong> –¢–∞–∑–∏ –ø–æ–∫–∞–Ω–∞ –µ –≤–∞–ª–∏–¥–Ω–∞ –¥–æ <strong>${expiresDate}</strong>.</p>
        
        <p>–ê–∫–æ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–∞ –∫–ª–∏–∫–Ω–µ—Ç–µ –Ω–∞ –±—É—Ç–æ–Ω–∞, –∫–æ–ø–∏—Ä–∞–π—Ç–µ –∏ –ø–æ—Å—Ç–∞–≤–µ—Ç–µ —Ç–æ–∑–∏ –ª–∏–Ω–∫ –≤ –±—Ä–∞—É–∑—ä—Ä–∞ —Å–∏:</p>
        <p style="word-break: break-all; background: #f0f0f0; padding: 10px; border-radius: 4px;">
          ${invitationLink}
        </p>
        
        <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">
        
        <p><strong>–ö–æ–Ω—Ç–∞–∫—Ç —Å —Ç—Ä–µ–Ω—å–æ—Ä–∞:</strong><br>
        ${data.trainerName}<br>
        üìß ${data.trainerEmail}</p>
      </div>
      
      <div class="footer">
        <p>–ê–∫–æ –Ω–µ –æ—á–∞–∫–≤–∞—Ö—Ç–µ —Ç–æ–∑–∏ –∏–º–µ–π–ª, –º–æ–∂–µ—Ç–µ –¥–∞ –≥–æ –∏–≥–Ω–æ—Ä–∏—Ä–∞—Ç–µ.</p>
        <p>¬© 2025 Fitness Platform. –í—Å–∏—á–∫–∏ –ø—Ä–∞–≤–∞ –∑–∞–ø–∞–∑–µ–Ω–∏.</p>
      </div>
    </body>
    </html>
    `;
  }

  /**
   * Generate plain text email template
   */
  private generateInvitationEmailText(data: InvitationEmailData, invitationLink: string): string {
    const recipientName = data.recipientName || data.recipientEmail.split('@')[0];
    const expiresDate = new Date(data.expiresAt).toLocaleDateString('bg-BG');

    return `
–ó–¥—Ä–∞–≤–µ–π—Ç–µ${recipientName ? `, ${recipientName}` : ''}!

${data.trainerName} –≤–∏ –∫–∞–Ω–∏ –¥–∞ —Å—Ç–∞–Ω–µ—Ç–µ –Ω–µ–≥–æ–≤ –∫–ª–∏–µ–Ω—Ç –∏ –¥–∞ –∑–∞–ø–æ—á–Ω–µ—Ç–µ —Ä–∞–±–æ—Ç–∞ –∑–∞–µ–¥–Ω–æ –∑–∞ –ø–æ—Å—Ç–∏–≥–∞–Ω–µ –Ω–∞ –≤–∞—à–∏—Ç–µ —Ñ–∏—Ç–Ω–µ—Å —Ü–µ–ª–∏.

${data.personalMessage ? `–õ–∏—á–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ –æ—Ç ${data.trainerName}:
"${data.personalMessage}"

` : ''}–ö–∞–∫–≤–æ –≤–∏ –æ—á–∞–∫–≤–∞:
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤—ä—á–Ω–∏ –ø—Ä–æ–≥—Ä–∞–º–∏
‚Ä¢ –ö–∞–ª–µ–Ω–¥–∞—Ä —Å –ø–ª–∞–Ω–∏—Ä–∞–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏  
‚Ä¢ –ü—Ä–æ—Å–ª–µ–¥—è–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å –∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
‚Ä¢ –•—Ä–∞–Ω–∏—Ç–µ–ª–Ω–∏ –ø—Ä–µ–ø–æ—Ä—ä–∫–∏ –∏ –ø–ª–∞–Ω–æ–≤–µ
‚Ä¢ –î–∏—Ä–µ–∫—Ç–Ω–∞ –≤—Ä—ä–∑–∫–∞ —Å –≤–∞—à–∏—è —Ç—Ä–µ–Ω—å–æ—Ä

–ó–∞ –¥–∞ –∑–∞–ø–æ—á–Ω–µ—Ç–µ, –∫–ª–∏–∫–Ω–µ—Ç–µ –Ω–∞ —Ç–æ–∑–∏ –ª–∏–Ω–∫:
${invitationLink}

–í–∞–∂–Ω–æ: –¢–∞–∑–∏ –ø–æ–∫–∞–Ω–∞ –µ –≤–∞–ª–∏–¥–Ω–∞ –¥–æ ${expiresDate}.

–ö–æ–Ω—Ç–∞–∫—Ç —Å —Ç—Ä–µ–Ω—å–æ—Ä–∞:
${data.trainerName}
${data.trainerEmail}

–ê–∫–æ –Ω–µ –æ—á–∞–∫–≤–∞—Ö—Ç–µ —Ç–æ–∑–∏ –∏–º–µ–π–ª, –º–æ–∂–µ—Ç–µ –¥–∞ –≥–æ –∏–≥–Ω–æ—Ä–∏—Ä–∞—Ç–µ.

¬© 2025 Fitness Platform
    `.trim();
  }

  /**
   * Log email sending in database
   */
  private async logEmailSent(data: InvitationEmailData): Promise<void> {
    try {
      const supabase = await this.getSupabaseClient();
      
      // Find the invitation ID based on token
      const { data: invitation } = await supabase
        .from("trainer_invitations")
        .select("id")
        .eq("token", data.invitationToken)
        .single();

      if (invitation) {
        await supabase
          .from("email_logs")
          .insert({
            invitation_id: invitation.id,
            recipient_email: data.recipientEmail,
            email_type: 'invitation',
            subject: `–ü–æ–∫–∞–Ω–∞ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç ${data.trainerName}`,
            template_name: 'trainer_invitation',
            status: 'sent'
          });
      }
    } catch (error) {
      console.error('Error logging email:', error);
    }
  }

  /**
   * Send reminder email for pending invitations
   */
  async sendReminderEmail(invitationId: string): Promise<boolean> {
    try {
      const supabase = await this.getSupabaseClient();
      
      const { data: invitation } = await supabase
        .from("trainer_invitations")
        .select(`
          *,
          profiles!trainer_invitations_trainer_id_fkey(full_name, email)
        `)
        .eq("id", invitationId)
        .eq("status", "pending")
        .single();

      if (!invitation) {
        throw new Error("Invitation not found or not pending");
      }

      const emailData: InvitationEmailData = {
        recipientEmail: invitation.email,
        recipientName: invitation.first_name,
        trainerName: invitation.profiles?.full_name || '–¢—Ä–µ–Ω—å–æ—Ä',
        trainerEmail: invitation.profiles?.email || '',
        personalMessage: `–¢–æ–≤–∞ –µ –Ω–∞–ø–æ–º–Ω—è–Ω–µ –∑–∞ –ø–æ–∫–∞–Ω–∞—Ç–∞ –≤–∏. ${invitation.personal_message || ''}`.trim(),
        invitationToken: invitation.token,
        expiresAt: invitation.expires_at
      };

      return await this.sendInvitationEmail(emailData);
    } catch (error) {
      console.error('Error sending reminder email:', error);
      return false;
    }
  }
}

// Export singleton instance
export const invitationEmailService = new InvitationEmailService();